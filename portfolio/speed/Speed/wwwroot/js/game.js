$('#game_div').hide();
$('#speed_btn').hide();


var connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();
var connectionId = (Math.random() + 1).toString(36).substring(7);
var player = "";
connection.start().then(function () {
    connection.invoke('JoinGame', connection.connectionId);
}).catch(function (err) {
    return console.error(err.toString());
});

connection.on("UpdatePlayer", function (player_number) {
    player = player_number;
    connectionId = connection.connectionId;
    if (player == "player_one" || player == "player_two") {
        connection.invoke("StartGame", player);
    }
});

connection.on("UpdateGame", function (my_hand, my_count, play_one, play_two, opp_count, opp_hand_count) {
    if (my_hand.length == 0) {
        $('#speed_btn').show();
    }
    $('#game_div').show();
    $('#waiting_for_game').hide();
    player_count.innerHTML = my_count;
    other_count.innerHTML = opp_count;
    pile_one.src = "../lib/cards/" + play_one;
    pile_two.src = "../lib/cards/" + play_two;
    cards = $('.drag').children();
    $(my_hand).each(function (index, element) {
        console.log(element);
        cards[index].src = "../lib/cards/" + element;
    });
    for (let i = 0; i < cards.length - my_hand.length; i++) {
        $(cards).last().remove();
    }
    opp_hand = $('.opp_hand');
    for (let i = 0; i < opp_hand.length - opp_hand_count; i++) {
        $(opp_hand).last().remove();
    }
});

$('#speed_button').click(function () {
    connection.invoke("Speed");
});

$('#game_over_playagain').click(function () {
    var opp_cards = $('.opp_hand_div');
    var my_hand = $('.drag');

    for (let i = 0; i < opp_cards.length; i++) {
        if (!opp_cards[i].childElementCount > 0) {
            var child = document.createElement("img");
            child.classList.add("opp_hand", "img-fluid");
            child.setAttribute("src", "../lib/cards/card_back.png");
            opp_cards[i].appendChild(child);
        }
    }
    for (let i = 0; i < my_hand.length; i++) {
        if (!my_hand[i].childElementCount > 0) {
            var child = document.createElement("img");
            child.classList.add("player_hand", "img-fluid");
            child.setAttribute("src", "../lib/cards/card_back.png");
            child.setAttribute("id", "my_hand_" + i);
            my_hand[i].appendChild(child);
        }
    }
    $('#game_div').hide();
    $('#speed_btn').hide();
    $('#waiting_for_game').show();
    connection.invoke('JoinGame', connection.connectionId);
});

connection.on("ReceiveMessage", function (message) {
    console.log(message);
});

connection.on("GameOver", function (message) {
    $('#game_over_message').text(message);
    $('#game_over').modal("show");
});

$('.drag').draggable({
    appendTo: 'body',
    helper: 'clone'
});

$('.dropzone').droppable({
    activeClass: 'active',
    hoverClass: 'hover',
    accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
    drop: function (e, ui) {
        connection.invoke("PlayCard", player, ui.draggable[0].id, e.target.id);
    }
}).sortable({
    items: '.drop-item',
    sort: function () {
        // gets added unintentionally by droppable interacting with sortable
        // using connectWithSortable fixes this, but doesn't allow you to customize active/hoverClass options
        $(this).removeClass("active");
    }
});

